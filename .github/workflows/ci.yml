name: ci
on:
  push:
    branches:
    - master
  pull_request: {}


jobs:
  cargo-deny:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - uses: EmbarkStudios/cargo-deny-action@v0
      with:
        command: "check advisories"
  test-behavior:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - run: "cd tests && make test-behavior"
  check-component-features:
    runs-on: ubuntu-latest
    env:
      USE_CONTAINER: none
    steps:
    - uses: actions/checkout@v1
    - run: "make check-component-features"
  check-code:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - run: "make check-code"
        env:
          PASS_RUSTFLAGS: "-D warnings"
  check-fmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - run: "make check-fmt"
        env:
          PASS_RUSTFLAGS: "-D warnings"
  check-generate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - run: "make check-fmt"
  check-version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - run: "make check-version"
  check-blog:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - run: "make check-blog"
  test-build:
    runs-on: ubuntu-latest
    env:
      RUST_BACKTRACE: full
      TEST_LOG: debug
      AWS_ACCESS_KEY_ID: fake-aws-key
      AWS_SECRET_ACCESS_KEY: fake-aws-key
      TARGET: x86_64-unknown-linux-gnu
      USE_CONTAINER: none
    steps:
      - uses: actions/checkout@v1
      # Build Vector and our test fixtures.
      - run: cargo test --no-run --features docker --target $TARGET
      - name: Save vector
        uses: actions/upload-artifact@v1
        with:
          name: binary
          path: ./target/x86_64-unknown-linux-gnu/debug/vector
      # We only get 14gb of disk space, so be frugal.
      - run: mkdir -p test-artifacts
      - run: find ./target/$TARGET -maxdepth 2 -type f -executable -name '*-*' |  xargs -I '{}' mv '{}' test-artifacts/
      - run: cargo clean # Get some disk space!
      # Upload the artifacts for use later.
      - run: tar -zcvf test-artifacts.tar.gz test-artifacts/
      - name: Save vector test artifacts
        uses: actions/upload-artifact@v1
        with:
          name: test-artifacts
          path: test-artifacts.tar.gz
  test-stable:
    needs: test-build
    runs-on: ubuntu-latest
    env:
      RUST_BACKTRACE: full
      TEST_LOG: debug
      AWS_ACCESS_KEY_ID: fake-aws-key
      AWS_SECRET_ACCESS_KEY: fake-aws-key
      TARGET: x86_64-unknown-linux-gnu
      USE_CONTAINER: none
    steps:
      - uses: actions/checkout@v1
      - name: Download math result for job 1
        uses: actions/download-artifact@v1
        with:
          name: test-artifacts
      - run: tar -zxvf test-artifacts/test-artifacts.tar.gz
      - run: rm test-artifacts/test-artifacts.tar.gz
      - run: |
          docker-compose pull
          docker-compose up -d splunk
          sleep 30 # Splunk crashes when started simultaneously with other services
          docker-compose up -d test-runtime-deps
          sleep 180
      - run: find ./target/$TARGET -maxdepth 2 -type f -executable -name '*-*' | sh -e

  clickhouse-integration-tests:
    runs-on: ubuntu-latest
    services:
      clickhouse:
        image: yandex/clickhouse-server:19
        ports:
          - "8123:8123"
    env:
      RUST_BACKTRACE: full
      TEST_LOG: debug
      AWS_ACCESS_KEY_ID: fake-aws-key
      AWS_SECRET_ACCESS_KEY: fake-aws-key
      TARGET: x86_64-unknown-linux-gnu
      USE_CONTAINER: none
      FEATURES: clickhouse-integration-tests
    steps:
      - uses: actions/checkout@v1
      - run: cargo test --features $FEATURES

  aws-integration-tests:
    runs-on: ubuntu-latest
    services:
      localstack:
        image: localstack/localstack@sha256:f21f1fc770ee4bfd5012afdc902154c56b7fb18c14cf672de151b65569c8251e
        ports:
          - "4568:4568"
          - "4582:4582"
          - "4571:4571"
          - "4573:4573"
        env:
          SERVICES: kinesis:4568,cloudwatch:4582,elasticsearch:4571,firehose:4573
      mockwatchlogs:
        image: luciofranco/mockwatchlogs:latest
        ports:
          - "6000:6000"
        env:
          RUST_LOG: trace
      ec2_metadata:
        image: timberiodev/mock-ec2-metadata:latest
        ports:
          - "8111:8111"
    env:
      RUST_BACKTRACE: full
      TEST_LOG: debug
      AWS_ACCESS_KEY_ID: fake-aws-key
      AWS_SECRET_ACCESS_KEY: fake-aws-key
      TARGET: x86_64-unknown-linux-gnu
      USE_CONTAINER: none
      FEATURES: cloudwatch-logs-integration-tests,cloudwatch-metrics-integration-tests,ec2-metadata-integration-tests,firehose-integration-tests,kinesis-integration-tests,s3-integration-tests
    steps:
      - uses: actions/checkout@v1
      - run: cargo test --features $FEATURES

  docker-integration-tests:
    runs-on: ubuntu-latest
    env:
      RUST_BACKTRACE: full
      TEST_LOG: debug
      AWS_ACCESS_KEY_ID: fake-aws-key
      AWS_SECRET_ACCESS_KEY: fake-aws-key
      TARGET: x86_64-unknown-linux-gnu
      USE_CONTAINER: none
      FEATURES: docker-integration-tests
    steps:
      - uses: actions/checkout@v1
      - run: cargo test --features $FEATURES

  es-integration-tests:
    runs-on: ubuntu-latest
    services:
      elasticsearch:
        image: elasticsearch:6.6.2
        ports:
          - "9200:9200"
          - "9300:9300"
        env:
          discovery.type: single-node
      elasticsearch-tls:
        image: elasticsearch:6.6.2
        ports:
          - "9201:9200"
          - "9301:9300"
        env:
          discovery.type: single-node
          xpack.security.enabled: true
          xpack.security.http.ssl.enabled: true
          xpack.security.transport.ssl.enabled: true
          xpack.ssl.certificate: certs/localhost.crt
          xpack.ssl.key: certs/localhost.key
        volumes:
          - ./tests/data:/usr/share/elasticsearch/config/certs:ro
    env:
      RUST_BACKTRACE: full
      TEST_LOG: debug
      AWS_ACCESS_KEY_ID: fake-aws-key
      AWS_SECRET_ACCESS_KEY: fake-aws-key
      TARGET: x86_64-unknown-linux-gnu
      USE_CONTAINER: none
      FEATURES: es-integration-tests
    steps:
      - uses: actions/checkout@v1
      - run: cargo test --features $FEATURES

  gcp-integration-tests:
    runs-on: ubuntu-latest
    services:
      gcloud-pubsub:
        image: messagebird/gcloud-pubsub-emulator
        ports:
          - 8681-8682:8681-8682
        env:
          PUBSUB_PROJECT1: testproject,topic1:subscription1
    env:
      RUST_BACKTRACE: full
      TEST_LOG: debug
      AWS_ACCESS_KEY_ID: fake-aws-key
      AWS_SECRET_ACCESS_KEY: fake-aws-key
      TARGET: x86_64-unknown-linux-gnu
      USE_CONTAINER: none
      FEATURES: gcp-pubsub-integration-tests, gcs-integration-tests
    steps:
      - uses: actions/checkout@v1
      - run: cargo test --features $FEATURES

  kafka-integration-tests:
    runs-on: ubuntu-latest
    services:
      kafka:
        image: wurstmeister/kafka
        ports:
          - "9091-9093:9091-9093"
        env:
          KAFKA_BROKER_ID: 1
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_LISTENERS: PLAINTEXT://:9092,SSL://:9091
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,SSL://localhost:9091
          KAFKA_SSL_KEYSTORE_LOCATION: /certs/localhost.p12
          KAFKA_SSL_KEYSTORE_PASSWORD: NOPASS
          KAFKA_SSL_TRUSTSTORE_LOCATION: /certs/localhost.p12
          KAFKA_SSL_TRUSTSTORE_PASSWORD: NOPASS
          KAFKA_SSL_KEY_PASSWORD: NOPASS
          KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: none
        volumes:
          - ./tests/data/localhost.p12:/certs/localhost.p12:ro
    env:
      RUST_BACKTRACE: full
      TEST_LOG: debug
      AWS_ACCESS_KEY_ID: fake-aws-key
      AWS_SECRET_ACCESS_KEY: fake-aws-key
      TARGET: x86_64-unknown-linux-gnu
      USE_CONTAINER: none
      FEATURES: kafka-integration-tests
    steps:
      - uses: actions/checkout@v1
      - run: cargo test --features $FEATURES

  influxdb-integration-tests:
    runs-on: ubuntu-latest
    services:
      influxdb_v1:
        image: influxdb:1.7
        ports:
          - "8086:8086"
        env:
          INFLUXDB_REPORTING_DISABLED: true
      influxdb_v2:
        image: quay.io/influxdb/influxdb:2.0.0-beta
        ports:
          - "9999:9999"
        command: influxd --reporting-disabled
    env:
      RUST_BACKTRACE: full
      TEST_LOG: debug
      AWS_ACCESS_KEY_ID: fake-aws-key
      AWS_SECRET_ACCESS_KEY: fake-aws-key
      TARGET: x86_64-unknown-linux-gnu
      USE_CONTAINER: none
      FEATURES: influxdb-integration-tests
    steps:
      - uses: actions/checkout@v1
      - run: cargo test --features $FEATURES

  splunk-integration-tests:
    runs-on: ubuntu-latest
    services:
      splunk:
        image: timberio/splunk-hec-test:latest
        ports:
          - "8088:8088"
          - "8000:8000"
          - "8089:8089"
        entrypoint: ["sh", "-c", "./bin/splunk add index custom_index && ./entrypoint.sh"]
    env:
      RUST_BACKTRACE: full
      TEST_LOG: debug
      AWS_ACCESS_KEY_ID: fake-aws-key
      AWS_SECRET_ACCESS_KEY: fake-aws-key
      TARGET: x86_64-unknown-linux-gnu
      USE_CONTAINER: none
      FEATURES: splunk-integration-tests
    steps:
      - uses: actions/checkout@v1
      - run: cargo test --features $FEATURES

  pulsar-integration-tests:
    runs-on: ubuntu-latest
    services:
      splunk:
        image: timberio/splunk-hec-test:latest
        ports:
          - "8088:8088"
          - "8000:8000"
          - "8089:8089"
        entrypoint: ["sh", "-c", "./bin/splunk add index custom_index && ./entrypoint.sh"]
    env:
      RUST_BACKTRACE: full
      TEST_LOG: debug
      AWS_ACCESS_KEY_ID: fake-aws-key
      AWS_SECRET_ACCESS_KEY: fake-aws-key
      TARGET: x86_64-unknown-linux-gnu
      USE_CONTAINER: none
      FEATURES: pulsar-integration-tests
    steps:
      - uses: actions/checkout@v1
      - run: cargo test --features $FEATURES

## Kubernetes
# Build exectuables in parallel, and then tests on different Kubernetes versions in parallel.

  # Builds vector executable that will be tested.
  build-vector-kubernetes:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Build
      run: cargo build --release --no-default-features  --features "sources-kubernetes transforms-kubernetes sinks-console"
    - name: Save vector
      uses: actions/upload-artifact@v1
      with:
        name: builds
        path: ./target/release/vector

  # Builds vector executable that will be testing.
  build-test-vector-kubernetes:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Build
      run: cargo test --lib --features "sources-kubernetes transforms-kubernetes kubernetes-integration-tests" --no-run
    - name: Rename test executable
      run: find -regex "./target/debug/deps/vector-[0-9a-fA-F]+" -exec mv {} ./target/debug/deps/vector-test ';'
    - name: Save vector
      uses: actions/upload-artifact@v1
      with:
        name: builds
        path: ./target/debug/deps/vector-test

  # Uses two previosuly builded vector executables to do testing.
  test-kubernetes:
    needs: [build-vector-kubernetes,build-test-vector-kubernetes]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        kube: [1.14.10, 1.17.2]
    steps:
    - name: Load vector
      uses: actions/download-artifact@v1
      with:
        name: builds
    - uses: opsgang/ga-setup-minikube@v0.1.1
      with:
        minikube-version: 1.9.1
        k8s-version: ${{ matrix.kube }}
    - name: Start local repository
      run: docker run -d -p 5000:5000 --restart=always --name registry registry:2
    - name: Start minikube
      run: sudo CHANGE_MINIKUBE_NONE_USER=true /home/runner/bin/minikube start --vm-driver=none --kubernetes-version=v${{ matrix.kube }}
    - name: Build & push image
      run: |
        docker build -t "localhost:5000/vector_test:latest" -f - . << EOF
        FROM buildpack-deps:18.04-curl
        COPY ./builds/vector /usr/local/bin
        RUN chmod +x /usr/local/bin/vector
        ENTRYPOINT ["/usr/local/bin/vector"]
        EOF
        docker push localhost:5000/vector_test:latest
    - name: Make test binary executable
      run: chmod +x ./builds/vector-test
    - name: Run kubernetes integration tests
      run: KUBE_TEST_IMAGE=localhost:5000/vector_test:latest TEST_LOG=debug ./builds/vector-test --test-threads=1 kubernetes

