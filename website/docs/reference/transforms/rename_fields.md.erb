<%- component = metadata.transforms.rename_fields -%>

<%= component_header(component) %>

## Configuration

<%= component_config_example(component) %>

<%- if component.requirements.any? -%>
## Requirements

<%= component_requirements(component) %>

<%- end -%>
## Options

<%= fields(component.specific_options_list, heading_depth: 3) %>

<%- if component.env_vars_list.any? -%>
## Env Vars

<%= fields(component.env_vars_list, heading_depth: 3) %>

<%- end -%>
<%- if component.output.log -%>
## Output

<%= component_output(component, component.output.log, heading_depth: 3) %>

<%- end -%>
## How It Works [[sort]]

### Key Conflicts

Keys specified in this transform will replace existing keys _in full_. For
example, if a target key contains an object value it will be replaced _entirely_
by the new key's value, even if the new value is an object itself. Vector will
_not_ perform a deep merge.

<Alert type="warning">

Vector makes no guarantee on the order of execution. If two rename operations
conflict, it is recommended to split them up across two separate rename
transforms.

</Alert>

### Nested Fields

The `rename_fields` transform will support dotted keys or [TOML
tables][urls.toml_table]. We recommend the dotted key syntax since it is less
verbose for this usecase:

```
[transforms.<transform-id>]
  # ...

  [transforms.<transform-id>.fields]
    parent.child.grandchild = "other_parent.child.grandchild"
```

Results in:

```json
{
  "other_parent.child.grandchild": "value"
}
```

Learn more about how [`log` events][docs.data-model.log] are structured.

<%= component_sections(component) %>


