syntax = "proto2";

package com.signalfx.metrics.protobuf;

enum MetricType {
    /**
     * Numerical: Periodic, instantaneous measurement of some state.
     */
    GAUGE = 0;
    /**
     * Numerical: Count of occurrences. Generally non-negative integers.
     */
    COUNTER = 1;
    /**
     * String: Used for non-continuous quantities (that is, measurements where there is a fixed
     * set of meaningful values). This is essentially a special case of gauge.
     */
    ENUM = 2;
    /**
     * Tracks a value that increases over time, where only the difference is important.
     */
    CUMULATIVE_COUNTER = 3;
}

message Datum {
    optional string strValue = 1;
    optional double doubleValue = 2;
    optional int64 intValue = 3;
}

message Dimension {
    optional string key = 1;
    optional string value = 2;
}

message DataPoint {
    optional string source = 1;
    optional string metric = 2;
    optional int64 timestamp = 3;
    optional Datum value = 4;
    optional MetricType metricType = 5;
    repeated Dimension dimensions = 6;
}

message DataPointUploadMessage {
    repeated DataPoint datapoints = 1;
}

message PointValue {
    optional int64 timestamp = 3;
    optional Datum value = 4;
}

/**
* Different categories of events supported
*/
enum EventCategory {
    /**
     * Created by user via UI or API, e.g. a deployment event
     */
    USER_DEFINED = 1000000;
    /**
     * Output by anomaly detectors
     */
    ALERT = 100000;
    /**
     * Audit trail events
     */
    AUDIT = 200000;
    /**
     * Generated by analytics server
     */
    JOB = 300000;
    /**
     * @deprecated
     * Event originated within collectd (deprecated in favor of AGENT)
     */
    COLLECTD = 400000;
    /**
     * Service discovery event
     */
    SERVICE_DISCOVERY = 500000;
    /**
     * Created by exception appenders to denote exceptional events
     */
    EXCEPTION = 700000;
    /**
     * Event originated from an agent
     */
     AGENT = 2000000;
}

message Property {
    optional string key = 1;
    optional PropertyValue value = 2;
}

message PropertyValue {
    optional string strValue = 1;
    optional double doubleValue = 2;
    optional int64 intValue = 3;
    optional bool boolValue = 4;
}

message Event {
    required string eventType = 1;
    repeated Dimension dimensions = 2;
    repeated Property properties = 3;
    optional EventCategory category = 4;
    optional int64 timestamp = 5;
}

message EventUploadMessage {
    repeated Event events = 1;
}
