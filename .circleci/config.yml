version: 2

release-job-defaults: &release-job-defaults
  machine: true
  steps:
    - run:
        name: Install Rust
        command: |
          set -e
          curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain stable
          export PATH="$HOME/.cargo/bin:$PATH"
          rustup install stable
    - run:
        name: Install Cross
        command: |
          export PATH="$HOME/.cargo/bin:$PATH"
          cargo install cross
    - checkout
    - run:
        name: Cross Compile
        command: |
          export PATH="$HOME/.cargo/bin:$PATH"
          cross build --target $TARGET --release $EXTRA_ARGS

jobs:
  rustfmt:
    docker:
      - image: rust:latest

    steps:
      - checkout
      - restore_cache:
          key: project-cache
      - run:
          name: Check formatting
          command: |
            rustup component add rustfmt
            rustfmt --version
            cargo fmt -- --check
      - save_cache:
          key: project-cache
          paths:
            - "~/.cargo"
            - "./target"

  build-stable:
    resource_class: large
    docker:
      - image: rust:latest

    steps:
      - checkout
      - restore_cache:
          key: project-cache
      - run:
          name: Install make and friends
          command: |
            apt-get update
            apt-get -y install build-essential
      - run:
          name: Build
          environment:
            RUSTFLAGS: "-D warnings"
          command: |
            cargo check --all --all-features --all-targets
      - save_cache:
          key: project-cache
          paths:
            - "~/.cargo"
            - "./target"

  test-stable:
    resource_class: large
    docker:
      - image: rust:latest
        environment:
          RUST_BACKTRACE: full
          AWS_ACCESS_KEY_ID: "fake-aws-key"
          AWS_SECRET_ACCESS_KEY: "fake-aws-key"
      - image: localstack/localstack:latest
        environment:
          DATA_DIR: /tmp/localstack/data
          DEBUG: 1
          PORT_WEB_UI: 8888
          SERVICES: kinesis
      - image: minio/minio
        environment:
          MINIO_ACCESS_KEY: "test-access-key"
          MINIO_SECRET_KEY: "test-secret-key"
        command: server /tmp
      - image: luciofranco/mockwatchlogs:latest
      - image: spotify/kafka
        environment:
          ADVERTISED_HOST: localhost
          ADVERTISED_PORT: 9092
      - image: timberio/splunk-hec-test:latest

    steps:
      - checkout
      - restore_cache:
          key: project-cache
      - run:
          name: Install make and friends
          command: |
            apt-get update
            apt-get -y install build-essential
      - run:
          name: Test
          command: |
            cargo test --all --features docker
      - store_test_results:
          path: ./test-results
      - save_cache:
          key: project-cache
          paths:
            - "~/.cargo"
            - "./target"

  release-arm-unknown-linux-gnueabi:
    <<: *release-job-defaults
    environment:
      TARGET: "arm-unknown-linux-gnueabi"
      EXTRA_ARGS: --no-default-features

  release-x86_64-unknown-linux-gnu:
    <<: *release-job-defaults
    environment:
      TARGET: "x86_64-unknown-linux-gnu"
      EXTRA_ARGS: --no-default-features

  release-x86_64-unknown-freebsd:
    <<: *release-job-defaults
    environment:
      TARGET: "x86_64-unknown-freebsd"
      EXTRA_ARGS: --no-default-features

  release-x86_64-unknown-netbsd:
    <<: *release-job-defaults
    environment:
      TARGET: "x86_64-unknown-netbsd"
      EXTRA_ARGS: --no-default-features

  release-x86_64-apple-darwin:
    macos:
      xcode: "9.0"
    environment:
      EXTRA_ARGS: --no-default-features
      TARGET: "x86_64-apple-darwin"
    steps:
      - run:
          name: Install Rust
          command: |
            set -e
            curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain stable
            export PATH="$HOME/.cargo/bin:$PATH"
            rustup install stable
      - run:
          name: Install Cross
          command: |
            export PATH="$HOME/.cargo/bin:$PATH"
            cargo install cross
      - checkout
      - run:
          name: Compile
          command: |
            export PATH="$HOME/.cargo/bin:$PATH"
            cross build --target $TARGET --release $EXTRA_ARGS

workflows:
  version: 2

  test:
    jobs:
      - rustfmt
      - build-stable
      - test-stable
      - release-arm-unknown-linux-gnueabi
      - release-x86_64-unknown-linux-gnu
      - release-x86_64-unknown-freebsd
      - release-x86_64-unknown-netbsd
      - release-x86_64-apple-darwin
