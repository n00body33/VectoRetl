<%- component = metadata.transforms.logfmt_parser -%>

<%= component_header(component) %>

<%- if component.requirements.any? -%>
## Requirements

<%= component_requirements(component) %>

<%- end -%>
<%- if component.warnings.any? -%>
## Warnings

<%= component_warnings(component) %>

<%- end -%>
## Configuration

<%= component_config_example(component) %>

<%= fields(component.specific_options_list, heading_depth: 3) %>

<%- if component.env_vars_list.any? -%>
## Env Vars

<%= fields(component.env_vars_list, heading_depth: 3) %>

<%- end -%>
<%= component_fields(component, heading_depth: 2) -%>
<%- if component.examples.any? -%>
## Examples

<%= component_examples(component) %>

<%- end -%>
## How It Works [[sort]]

<%= component_sections(component) %>

### Key/Value Parsing

This transform can be used for key/value parsing. [Logfmt][urls.logfmt] refers
to a _loosely_ defined spec that parses a key/value pair delimited by a `=`
character.

### Quoting

Values can be quoted to capture spaces, and quotes can be escaped with `\`.
For example

```text
key1="value with spaces" key2="value with spaces and \""
```

Would result in the following `log` event:

```json title="log event"
{
  "key1": "value with spaces",
  "key2": "value with spaces and \""
}
```

### Supported Formats

Currently, the `logfmt_parser` only supports the _loosely_ defined format
described by [logfmt][urls.logfmt]. This means only key/value pairs delimited
with a `=`. If you need support for other delimited please consider contributing
to Vector or using the [`lua` transform][docs.transforms.lua].
