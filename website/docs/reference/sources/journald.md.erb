<%- component = metadata.sources.journald -%>

<%= component_header(component) %>

## Configuration

<%= component_config_example(component) %>

<%- if !component.requirements.nil? -%>
## Requirements

<Alert type="danger" fill={true} icon={false}>

<%= component.requirements %>

</Alert>

<%- end -%>
## Options

<%= options(component.specific_options_list, heading_depth: 3) %>

<%- if component.env_vars_list.any? -%>
## Env Vars

<%= options(component.env_vars_list, heading_depth: 3) %>

<%- end -%>
<%- if component.output.log -%>
## Output

<%= component_output(component, component.output.log, heading_depth: 3) %>

<%- end -%>
## How It Works [[sort]]

### Checkpointing

Vector checkpoints the journal position after every successful read. This
ensures that Vector resumes where it left off if restarted, preventing data
from being read twice. The checkpoint positions are stored in the data
directory which is specified via the
[global `data_dir` option][docs.configuration#data-directory] but can be
overridden via the `data_dir` option in the `journald` source directly.

### Communication with systemd journal

To ensure the `journald` source works across all platforms, Vector interacts
with the Systemd journal via the `journalctl` utility. This is accomplished by
spawning a [subprocess][urls.rust_subprocess] that Vector diligently interacts
with. Taking care to restart the process and handle failures accordigly. If
the `journalctl` is not in your environment path you can specify the exact
location via the `journalctl_path` option. For more information on this
strategy see [issue #1473][urls.issue_1473].

<%= component_sections(component) %>
