syntax = "proto3";

package dd_trace;

// AgentPayload represents payload the agent sends to the intake.
message AgentPayload {
    // hostName specifies hostname of where the agent is running.
    string hostName = 1;
    // env specifies `env` set in agent configuration.
    string env = 2;
    // tracerPayloads specifies list of the payloads received from tracers.
    repeated TracerPayload tracerPayloads = 5;
    // tags specifies tags common in all `tracerPayloads`.
    map<string, string> tags = 6;
    // agentVersion specifies version of the agent.
    string agentVersion = 7;
    // targetTPS holds `TargetTPS` value in AgentConfig.
    double targetTPS = 8;
    // errorTPS holds `ErrorTPS` value in AgentConfig.
    double errorTPS = 9;
}

// TraceChunk represents a list of spans with the same trace id.
message TraceChunk {
	// priority specifies sampling priority of the trace.
	int32 priority = 1;
	// origin specifies origin product ("lambda", "rum", etc.) of the trace.
	string origin = 2;
	// spans specifies list of containing spans.
	repeated Span spans = 3;
	// tags specifies tags common in all `spans`.
	map<string, string> tags = 4;
	// droppedTrace specifies whether the trace was dropped by samplers or not.
	bool droppedTrace = 5;
}

// TracerPayload represents a payload the trace agent receives from tracers.
message TracerPayload {
	// containerID specifies the ID of the container where the tracer is running on.
	string containerID = 1;
	// languageName specifies language of the tracer.
	string languageName = 2;
	// languageVersion specifies language version of the tracer.
	string languageVersion = 3;
	// tracerVersion specifies version of the tracer.
	string tracerVersion = 4;
	// runtimeID specifies V4 UUID representation of a tracer session.
	string runtimeID = 5;
	// chunks specifies list of containing trace chunks.
	repeated TraceChunk chunks = 6;
	// tags specifies tags common in all `chunks`.
	map<string, string> tags = 7;
	// env specifies `env` tag that set with the tracer.
	string env = 8;
	// hostname specifies hostname of where the tracer is running.
	string hostname = 9;
	// version specifies `version` tag that set with the tracer.
	string appVersion = 10;
}

message TracePayload {
	string hostName = 1;
	string env = 2;
	repeated APITrace traces = 3;
	repeated Span transactions = 4;
}

message APITrace {
	uint64 traceID = 1;
	repeated Span spans = 2;
	int64 startTime = 6;
	int64 endTime = 7;
}

message Span {
	string service = 1;
	string name = 2;
	string resource = 3;
	uint64 traceID = 4;
	uint64 spanID = 5;
	uint64 parentID = 6;
	int64 start = 7;
	int64 duration = 8;
	int32 error = 9;
	map<string, string> meta = 10;
	map<string, double> metrics = 11;
	string type = 12;
}
