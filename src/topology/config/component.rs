use inventory;
use serde::{Deserialize, Serialize};
use std::marker::PhantomData;
use toml::Value;

/// Describes a component plugin storing its type name, an example config, and
/// other useful information about the plugin.
pub struct ComponentDescription<T: Sized> {
    pub type_str: &'static str,
    example_value: fn() -> Result<Value, String>,
    component_type: PhantomData<T>,
}

impl<T> ComponentDescription<T> {
    /// Creates a new component plugin description. A config example for this
    /// plugin is generated by parsing an empty string and serializing the
    /// result.
    pub fn new<'de, B>(type_str: &'static str) -> Self
    where
        B: Into<T> + Serialize + Deserialize<'de>,
    {
        ComponentDescription {
            type_str: type_str,
            example_value: || {
                toml::from_str::<B>("")
                    .map_err(|e| e.to_string())
                    .and_then(|c| Value::try_from(c).map_err(|e| e.to_string()))
            },
            component_type: PhantomData,
        }
    }

    /// Creates a new component plugin description. A config example for this
    /// plugin is generated by creating a default value and serializing the
    /// result.
    pub fn new_default<'de, B>(type_str: &'static str) -> Self
    where
        B: Default + Into<T> + Serialize + Deserialize<'de>,
    {
        ComponentDescription {
            type_str: type_str,
            example_value: || Value::try_from(B::default()).map_err(|e| e.to_string()),
            component_type: PhantomData,
        }
    }

    /// Returns an example config for a plugin identified by its type.
    pub fn example(type_str: &str) -> Result<Value, String>
    where
        T: 'static + Sized,
        inventory::iter<ComponentDescription<T>>:
            std::iter::IntoIterator<Item = &'static ComponentDescription<T>>,
    {
        inventory::iter::<ComponentDescription<T>>
            .into_iter()
            .find(|t| t.type_str == type_str)
            .ok_or(format!("unrecognized type '{}'", type_str))
            .and_then(|t| (t.example_value)())
    }

    /// Returns a sorted Vec of all plugins registered of a type.
    pub fn types() -> Vec<&'static str>
    where
        T: 'static + Sized,
        inventory::iter<ComponentDescription<T>>:
            std::iter::IntoIterator<Item = &'static ComponentDescription<T>>,
    {
        let mut types = Vec::new();
        for definition in inventory::iter::<ComponentDescription<T>> {
            types.push(definition.type_str);
        }
        types.sort();
        types
    }
}
